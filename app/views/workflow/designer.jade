extends ../layouts/defualt

block title
	title 新建流程 - #{pkg.name}

block head-page
	link(href='/css/bootstrap-modal.css' rel='stylesheet')
	link(href='/css/bootstrap-modal-bs3patch.css' rel='stylesheet')
	link(href='/css/jquery.contextMenu.css' rel='stylesheet')
	link(href='/css/flowchart.css' rel='stylesheet')


block content
	.row
		.col-md-6.col-md-offset-3
			.well.well-sm
				form#form.form-horizontal(action='/schema', method='post')
					fieldset
						legend.text-center 新建流程
						input.hidden(name='_csrf', value=csrf_token)
						.form-group
							label.col-md-2.control-label(for='name') 名称
							.col-md-9
								input#name.form-control(name='name', type='text', placeholder='流程名称')
						.form-group
							label.col-md-2.control-label(for='description') 描述
							.col-md-9
								textarea#description.form-control(name='description', placeholder='请输入流程的描述......', rows='5')
						.form-group
							input.hidden(name='fields')
							.col-md-12.text-right.btn-toolbar
								button#workflow.btn.btn-success(type='button', data-toggle='modal', data-target=null, href='#designer') 设计流程
						.form-group
							.col-md-12.text-right.btn-toolbar
								button#cancel.btn.btn-default(type='button') 取消
								button#save.btn.btn-primary.btn-lg(type='submit') 新建
	#designer.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel', aria-hidden='true')
		.modal-dialog
			.modal-content
				.modal-header
					button.close(type='button', data-dismiss='modal')
						span(aria-hidden='true') ×
						span.sr-only 关闭
					h4.modal-title 流程设计
				.modal-body
					#designerContainer.designerContainer
						#start.node
							strong start
						#end.node
							strong end
				.modal-footer
					button#designer-reset.btn.btn-danger(type='button') 重置
					button.btn.btn-default(type='button', data-dismiss='modal') 关闭
					button#designer-save.btn.btn-primary(type='button') 保存

	#conn-modal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel', aria-hidden='true')
		.modal-header
			button.close(type='button', data-dismiss='modal')
				span(aria-hidden='true') ×
				span.sr-only 关闭
			h4.modal-title 分支条件
		.modal-body
			.container
				form
					label
						input#isOptional(type='checkbox')
						| 是否手选
				.form-group
					label(for='test') 条件
					textarea#test.form-control(type='text', rows='3')
		.modal-footer
			button.btn.btn-default(type='button', data-dismiss='modal') 取消
			button#saveconn.btn.btn-primary(type='button') 保存
	#node-modal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel', aria-hidden='true')
		.modal-header
			button.close(type='button', data-dismiss='modal')
				span(aria-hidden='true') ×
				span.sr-only 关闭
			h4.modal-title 分支条件
		.modal-body
			.container
				form
					.form-group
						label(for='node-name') 名称
						input#node-name.form-control(type='text')
					.form-group
						label(for='node-description') 描述
						textarea#description.form-control(type='text', rows='3')
					.form-group
						label(for='node-testStart') 执行条件
						textarea#node-testStart.form-control(type='text', rows='3')
					.form-group
						label(for='node-processorsSelector') 处理人选择
						textarea#node-processorsSelector.form-control(type='text', rows='3')
					.form-group
						label(for='node-processorsStrategy') 处理人选择策略
						input#node-processorsStrategy.form-control(type='text')
					.form-group
						label(for='node-formSchemaOf') 数据模型
						input#node-formSchemaOf.form-control(type='text')
					.form-group
						label(for='node-formViewId') 表单
						input#node-formViewId.form-control(type='text')
		.modal-footer
			button.btn.btn-default(type='button', data-dismiss='modal') 取消
			button#savenode.btn.btn-primary(type='button') 保存


block foot-script
	script.
		require(['jquery', 'jqueryUI', 'jsPlumb', 'contextMenu', 'bootstrap-modal'], function ($) {
			$(function () {
				$('#cancel').click(function () {
					if (history.length) {
						history.back();
					} else {
						window.close();
					}
				});

				$('#designer').one('shown.bs.modal', function () {
					jsPlumb.ready(function () {
						jsPlumb.importDefaults({
							Container: 'designerContainer',
							DragOptions: {cursor: 'pointer', zIndex: 2000},
							Endpoint: ["Dot", {radius: 10}],
							HoverPaintStyle: {strokeStyle: "#42a62c", lineWidth: 8},
							ConnectionOverlays: [
								["Arrow", {location: -7, id: "arrow", length: 14, foldback: 0.8}],
								["Label", {location: 0.1, id: "label"}]
							]
						});

						// 用于记录当前编辑属性的对象
						var currentConnection = null;
						var currentNode = null;
						var uuid = (function () {
							var _uuid = 0;
							return function () {
								return 'node_' + ++_uuid;
							}
						})();
						var sourcePoint = {
							uuid: 'start_ep',
							isSource: true,
							isTarget: false,
							maxConnections: -1,
							anchor: "Right"
						};
						var targetPoint = {
							uuid: 'end_ep',
							isSource: false,
							isTarget: true,
							maxConnections: -1,
							anchor: "Left",
							paintStyle: {fillStyle: 'red'},
							endpoint: ["Rectangle", {width: 12, height: 12}]
						};

						jsPlumb.addEndpoint('start', sourcePoint);
						jsPlumb.addEndpoint('end', targetPoint);

						// todo: add event context menu
						$('#designerContainer').contextMenu({
							selector: '.node',
							callback: function (key, options, o) {
								var m = "clicked: " + key;
								console.log(m);
								console.log(options);
								console.log(o);
							},
							items: {
								"edit": {
									name: "属性",
									icon: "edit",
									callback: function () {
										var property = this.data('nodeProperty');
										if (property) {
											$('#node-name').val(property.name);
											$('#node-description').val(property.description);
											$('#node-testStart').val(property.testStart);
											if (property.processors) {
												$('#node-processorsSelector').val(property.processors.selector);
												$('#node-processorsStrategy').val(property.processors.strategy);
											}
											if(property.form) {
												$('#node-formSchemaOf').val(property.form.schemaOf);
												$('#node-formViewId').val(property.form.viewId);
											}
										}
										currentNode = this;
										$('#node-modal').modal('show');
									}
								},
								"cut": {name: "剪切", icon: "cut"},
								"copy": {name: "复制", icon: "copy"},
								"delete": {
									name: "删除",
									icon: "delete",
									disabled: function () {
										return this.is('#start,#end');
									},
									callback: function (key, option) {
										jsPlumb.detachAllConnections(this);
										jsPlumb.getEndpoints(this).forEach(function (e) {
											jsPlumb.deleteEndpoint(e);
										});
										this.remove();
									}
								},
								"sep1": "---------",
								"quit": {name: "Quit", icon: "quit"}
							}
						});

						var taskNode = '<div class="node"><strong>新节点</strong></div>';
						$.contextMenu({
							selector: '#designerContainer',
							items: {
								"new": {
									name: "新建节点",
									icon: "new",
									callback: function (key, option) {
										var el = $(taskNode).appendTo('#designerContainer');
										var id = uuid();
										el.attr('id', id);
										sourcePoint.uuid = 'sep_' + id;
										targetPoint.uuid = 'tep_' + id;
										jsPlumb.addEndpoints(el, [sourcePoint, targetPoint]);
										jsPlumb.draggable(el);
									}
								},
								"paste": {name: "粘贴", icon: "paste"},
								"sep1": "---------",
								"save": {name: "保存", icon: "save"},
								"quit": {name: "Quit", icon: "quit"}
							}
						});

						// 连接事件
						jsPlumb.bind("connection", function (info, originalEvent) {
							if (info.connection.sourceId == info.connection.targetId) {
								jsPlumb.detach(info);
								alert("不能连接自己！");
							}
							$.each(jsPlumb.getEndpoints(info.source), function (i, el) {
								if (info.connection != el.connections[0] &&
												(el.connections[0].targetId == info.targetId || (el.connections[0].sourceId == info.targetId && el.connections[0].targetId == info.sourceId))) {
									jsPlumb.detach(info.connection);
									alert("不能重复连接！");
									return false;
								}
							});
						});

						// 保存连接属性
						$('#saveconn').click(function () {
							var p = currentConnection.getParameters();
							p.isOptional = $('#isOptional').is(':checked');
							p.test = $('#test').val();
							$('#conn-modal').modal('hide');
							currentConnection.setLabel('test');
						});
						$('#conn-modal').on('hidden.bs.modal', function () {
							$(this).find('form')[0].reset();
						});

						// 保存节点属性
						$('#savenode').click(function () {
							var property = {};
							property.name = $('#node-name').val();
							property.description = $('#node-description').val();
							property.testStart = $('#node-testStart').val();
							property.processors = {};
							property.processors.selector = $('#node-processorsSelector').val();
							property.processors.strategy = $('#node-processorsStrategy').val();
							property.form = {};
							property.form.schemaOf = $('#node-formSchemaOf').val();
							property.form.viewId = $('#node-formViewId').val();
							currentNode.data('property', property);
							currentNode.children('strong').text(property.name);
							$('#node-modal').modal('hide');
						});
						$('#node-modal').on('hidden.bs.modal', function () {
							$(this).find('form')[0].reset();
						});

						// 单击编辑连接属性
						jsPlumb.bind("click", function (connection) {
							var p = connection.getParameters();
							$('#isOptional').prop('checked', p.isOptional);
							$('#test').val(p.test);
							currentConnection = connection;
							$('#conn-modal').modal('show');
						});
						// 双击取消连接
						jsPlumb.bind("dblclick", function (connection, originalEvent) {
							alert();
							jsPlumb.detach(connection);
						});
						jsPlumb.draggable($('.node'));

						$('#designer-reset').click(function () {
							jsPlumb.reset();
							$('#designerContainer')
											.empty()
											.append('<div id="start" class="node"><strong>start</strong></div><div id="end" class="node"><strong>end</strong></div>');

							jsPlumb.addEndpoint('start', sourcePoint);
							jsPlumb.addEndpoint('end', targetPoint);
						});

						$('#designer-save').click(function () {
							var nodes = $('#designerContainer').children('.node');
							var nodesData = [];
							var err = null;
							nodes.each(function () {
								var $this = $(this);
								var eps = jsPlumb.getEndpoints($this);
								if (!eps.every(function (ep) {
													return ep.connections.length;
												})) {
									err = new Error('节点【' + $this.text() + '】无效！');
									return false;
								}

								var node = $this.data('property') || {};
								node.nextNodes = [];
								node.waitNodes = [];
								eps.forEach(function (e) {
									if (e.isSource) {
										e.connections.forEach(function (con) {
											node.nextNodes.push($.extend({
												id: con.targetId
											}, con.getParameters()));
										});
									} else if (e.isTarget) {
										e.connections.forEach(function (con) {
											node.waitNodes.push(con.sourceId);
										});
									}
								});
								nodesData.push(node);
							});
							if (err) {
								alert(err);
								return;
							}

							$('#form').data('nodes', nodesData);
							$('#designer').modal('hide');
						});
					});
				});
			});
		});

