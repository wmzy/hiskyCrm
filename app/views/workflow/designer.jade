extends ../layouts/defualt

block title
	title 新建流程 - #{pkg.name}

block head-page
	link(href='/css/flowchart.css' rel='stylesheet')
	link(href='/css/jquery.contextMenu.css' rel='stylesheet')


block content
	.row
		.col-md-6.col-md-offset-3
			.well.well-sm
				form#form.form-horizontal(action='/schema', method='post')
					fieldset
						legend.text-center 新建流程
						input.hidden(name='_csrf', value=csrf_token)
						.form-group
							label.col-md-2.control-label(for='name') 名称
							.col-md-9
								input#name.form-control(name='name', type='text', placeholder='流程名称')
						.form-group
							label.col-md-2.control-label(for='description') 描述
							.col-md-9
								textarea#description.form-control(name='description', placeholder='请输入流程的描述......', rows='5')
						.form-group
							input.hidden(name='fields')
							.col-md-12.text-right.btn-toolbar
								button#workflow.btn.btn-success(type='button', data-toggle='modal', data-target='#designer') 设计流程
						.form-group
							.col-md-12.text-right.btn-toolbar
								button#cancel.btn.btn-default(type='button') 取消
								button#save.btn.btn-primary.btn-lg(type='submit') 新建
	#designer.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel', aria-hidden='true')
		.modal-dialog
			.modal-content
				.modal-header
					button.close(type='button', data-dismiss='modal')
						span(aria-hidden='true') ×
						span.sr-only 关闭
					h4.modal-title 流程设计
				.modal-body
					#designerContainer
						#node1.node(data-id=1)
							.ep
							strong node1
						#node2.node(data-id=2)
							.ep
							strong node2
						#node3.node(data-id=3)
							.ep
							strong node3
						#node4.node(data-id=4)
							.ep
							strong node4
						#start.node(data-id=6)
							.ep
							strong start
				.modal-footer
					button.btn.btn-default(type='button', data-dismiss='modal') 关闭
					button.btn.btn-primary(type='button') 保存


block foot-script
	script.
		require(['jquery', 'jqueryUI', 'jsPlumb'], function ($) {
			$(function () {
				$('#cancel').click(function () {
					if (history.length) {
						history.back();
					} else {
						window.close();
					}
				});
				$('#form').submit(function () {
				});

				$('#designer').one('shown.bs.modal', function () {
					jsPlumb.ready(function () {
						jsPlumb.importDefaults({
							Container: '#designerContainer',
							DragOptions: {cursor: 'pointer', zIndex: 2000},
							Endpoint: ["Dot", {radius: 10}],
							HoverPaintStyle: {strokeStyle: "#42a62c", lineWidth: 2},
							ConnectionOverlays: [
								["Arrow", {location: -7, id: "arrow", length: 14, foldback: 0.8}],
								["Label", {location: 0.1, id: "label"}]
							]
						});

						var startPoint = {
							isSource: true,
							isTarget: false,
							maxConnections: -1,
							anchor: "BottomCenter"
						};
						var nodePoint = {
							isSource: true,
							isTarget: true,
							maxConnections: -1,
							anchor: "TopCenter",
							paintStyle: {fillStyle: 'red'},
							endpoint: ["Rectangle", {width: 12, height: 12}]
						};
						var endPoint = {
							isSource: false,
							isTarget: true,
							maxConnections: -1,
							anchor: "TopCenter",
							paintStyle: {fillStyle: 'red'},
							endpoint: ["Rectangle", {width: 12, height: 12}]
						};

						jsPlumb.addEndpoint('#start', startPoint);
						jsPlumb.addEndpoint('#end', endPoint);

						// todo: add event context menu
						jsPlumb.bind();
						//jsPlumb.setContainer('#designerContainer');
						//// 连接事件
						//jsPlumb.bind("jsPlumbConnection", function (conn, originalEvent) {
						//	if (conn.connection.sourceId == conn.connection.targetId) {
						//		jsPlumb.detach(conn);
						//		alert("不能连接自己！");
						//	}
						//	$.each(jsPlumb.getEndpoints(conn.source), function (i, el) {
						//		if (conn.connection != el.connections[0] &&
						//						(el.connections[0].targetId == conn.targetId || (el.connections[0].sourceId == conn.targetId && el.connections[0].targetId == conn.sourceId))) {
						//			jsPlumb.detach(conn);
						//			alert("不能重复连接！");
						//			return false;
						//		}
						//	});
						//	nodeFlow.onConnectionChange && nodeFlow.onConnectionChange(conn);
						//	conn.connection.bind("editCompleted", function (o) {
						//		if (typeof console != "undefined")
						//			console.log("connection edited. path is now ", o.path);
						//	});
						//});
						//// 取消连接事件
						//jsPlumb.bind("jsPlumbConnectionDetached", function (conn) {
						//	nodeFlow.onConnectionChange && nodeFlow.onConnectionChange(conn);
						//});
						//// 双击取消连接
						//jsPlumb.bind("dblclick", function (conn, originalEvent) {
						//	jsPlumb.detach(conn);
						//});
						//// 连接的元素
						//// 本例中.node既是源头又是目标
						//var nodeList = $(".node");
						//nodeList.each(function (i, e) {
						//	// 设置连接的源元素
						//	jsPlumb.makeSource($(e), {
						//		filter: ".ep", // .ep元素用于拖动连接
						//		anchor: "Continuous",
						//		connector: ["Flowchart", {curviness: 20}], // 连接的方式为流程图
						//		connectorStyle: {strokeStyle: "#014ae1", lineWidth: 2},
						//		maxConnections: -1 // 最大连接数不限
						//	});
						//});
						//// 设置连接目标
						//jsPlumb.makeTarget(nodeList, {
						//	dropOptions: {hoverClass: "dragHover"},
						//	anchor: "Continuous"
						//});
						// 初始化所有连接元素为可拖动
						//var start = $('#start');
						//jsPlumb.makeSource(start, {
						//	filter: ".ep", // .ep元素用于拖动连接
						//	anchor: "Continuous",
						//	connector: ["Flowchart", { curviness: 20 }], // 连接的方式为流程图
						//	connectorStyle: { strokeStyle: "#014ae1", lineWidth: 2 },
						//	maxConnections: -1 // 最大连接数不限
						//});
						//jsPlumb.draggable($('.node'));
						jsPlumb.draggable($('#start'));

					});
				});
			});
		});

